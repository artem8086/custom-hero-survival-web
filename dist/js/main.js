"use strict";!function(){var t,e,i,s,r,a,n,h,o,l,d,u,c,f,m,p,v,y,g,w,x,P,z,b,A,O,k,C,M,T,U,j,D,I,S,J,F,W,q,R,X;t=class{constructor(){this.handlers=[]}on(t,e){var i;return e&&((i=this.handlers[t])||(this.handlers[t]=i=[]),i.indexOf(e)<0&&i.push(e)),this}off(t,e){var i,s;return e?(i=this.handlers[t])&&(s=i.indexOf(e))>=0&&i.splice(s,1):delete this.handlers[t],this}trigger(t,e){var i,s,r;if(i=this.handlers[t])for(s=0,r=i.length;s<r;s++)i[s].apply(this,e);return this}},e=function(){class t{static load(e,i){var s;return(s=t.cache[i])||((s=new t).load(e,i),t.cache[i]=s),s}load(t,e){return t.loadJson(e,t=>{this.data=t}),t.loadImage(e+".png",t=>{this.texture=t})}draw(t,e,i,s,r=0){var a;if(a=this.data)switch(e.constructor){case Object:t.drawImage(this.texture,e.x,e.y,e.w,e.h,i+e.cx,s+e.cy,e.w,e.h);break;case Array:this.draw(t,e[Math.floor(r)%e.lenght],i,s);break;case String:this.draw(t,a[e],i,s,r)}return this}}return t.cache=[],t}.call(void 0),s=function(){class t{static load(e,i){var s;return(s=t.cache[i])||((s=new t).load(e,i),t.cache[i]=s),s}load(t,e){return t.loadJson(e,t=>{var e,i,s;if(t){for(e in i=[],t)s=t[e],i.push(this[e]=s);return i}})}}return t.cache=[],t}.call(void 0),r=function(){return(new Date).getTime()/1e3},n=function(t){return function(e){return 1-t(1-e)}},a=function(t){return function(e){return e<.5?t(2*e)/2:(2-t(2*(1-e)))/2}},h=function(t,e){return o[t]=e,o[t+"EaseOut"]=n(e),o[t+"EaseInOut"]=a(e)},o={linear:function(t){return t},easeOut:function(t){return 1-t},easeInOut:function(t){return t<.5?2*t:2-2*t}},h("quad",(function(t){return t*t})),h("circle",(function(t){return 1-Math.sin(Math.acos(t))})),h("bounce",(function(t){var e,i;for(e=0,i=1;;){if(t>=(7-4*e)/11)return-Math.pow((11-6*e-11*t)/4,2)+Math.pow(i,2);e+=i,i/=2}})),i=function(){class t{reset(){return this.startTime=r(),this.deltaTime=0,this}setAnim(t,e=0,i=this.data){return this.anim=null!=i?i[t]:void 0,this.reset(),this.anim&&(this.duration=this.anim?this.anim.duration:0,this.setAngle(e)),this}setAngle(t){var e,i,s;return this.frame=null,this.anim&&(t%=360,(i=this.anim.dirs)&&((s=i.lenght)>1?(e=360/s,t<0&&(t+=360),this.frame=i[Math.floor(t/e)]):this.frame=i[0])),this}play(t){var e,i;if(t=t||r(),this.deltaTime=e=(t-this.startTime)*this.scale,!(i=this.duration))return!1;if(e>i){if(!this.loop)return!1;this.deltaTime%=i}return!0}animate(e,i=e.nodePath,s=e.nodeName){var r,a,n,h,l,d,u,c,f,m,p,v,y,g,w;if((a=this.frame)&&(g=a[i]||a[s]))for(r=this.deltaTime,c=t.props,f=t.propsUsed,n=0,h=g.length;n<h;n++)if(r>=(d=g[n]).end)for(l in m=d.to)w=m[l],f[l]||(c[l]=e[l],f[l]=!0),e[l]=w;else if(r>=d.start)for(l in v=d.func?o[d.func]:o.linear,p=d.to)w=p[l],u=e[l],f[l]||(c[l]=u,f[l]=!0),u||(u=0),w.constructor===Number?(y=v((r-d.start)/(d.end-d.start)),e[l]=(w-u)*y+u):e[l]=w;return this}reciveProps(e){var i,s,r;for(i in s=t.props,r=t.propsUsed)r[i]&&(e[i]=s[i],delete r[i]);return this}createWorkFrame(){return this.loop=!1,this.frame={work:[{start:0,end:0,to:{}}]},this}resetWork(){var e,i;for(e in i=t.propsUsed)i[e]&&(i[e]=!1);return this}clearWork(){var t,e,i;return(t=this.frame.work[0]).start=t.end=0,i=function(){var t;for(e in t=[],i)i[e],t.push(delete i[e]);return t}(),this}animateProps(t,e,i){var s,r,a,n;for(r in this.duration=e,(s=this.frame.work[0]).end=e,s.func=i,n=s.to,t)a=t[r],n[r]=a;return this.reset(),this}}return t.getTime=r,t.prototype.loop=!0,t.prototype.startTime=0,t.prototype.duration=0,t.prototype.deltaTime=0,t.prototype.scale=1,t.props=[],t.propsUsed=[],t}.call(void 0),d=function(){class t{static load(e,i){var s;return(s=t.cache[i])||((s=new t).load(e,i),t.cache[i]=s),s}load(i,s){return i.loadJson(s,s=>{var r,a,n,h,o,l,d,u,c,f,m,p,v,y;if(s){for(h in s)y=s[h],this[h]=y;if(this.images)for(h in a=this.images,this.images=[],a)r=a[h],this.images[h]=i.loadImage(r);if(this.sprites)for(h in v=this.sprites,this.sprites=[],v)p=v[h],this.sprites[h]=e.load(i,p);if(this.models)for(h in d=this.models,this.models=[],d)l=d[h],this.models[h]=t.load(i,l);if(c=function(t,e=""){var i,s,r;for(i in r=[],t)(s=t[i]).nodePath=e+i,s.nodeName="@"+i,s.before&&c(s.before,s.nodePath+"<"),s.after?r.push(c(s.after,s.nodePath+">")):r.push(void 0);return r},this.dirs){for(m=[],n=0,o=(f=this.dirs).length;n<o;n++)u=f[n],m.push(c(u));return m}}})}}return t.cache=[],t}.call(void 0),v={line:function(t){return t.moveTo(this.x1||0,this.y1||0),t.lineTo(this.x2||0,this.y2||0),this},rect:function(t){return t.rect(this.x||0,this.y||0,this.width||1,this.height||1),this},rectRound:function(t){var e,i,s,r,a;return this.noClose=!1,r=this.x||0,a=this.y||0,s=this.width,e=this.height,s<2*(i=this.radius)&&(i=s/2),e<2*i&&(i=e/2),t.moveTo(r+i,a),t.arcTo(r+s,a,r+s,a+e,i),t.arcTo(r+s,a+e,r,a+e,i),t.arcTo(r,a+e,r,a,i),t.arcTo(r,a,r+s,a,i),this},arc:function(t){return t.arc(this.x||0,this.y||0,this.radius,(this.startAngle||0)*Math.PI/180,(this.endAngle||360)*Math.PI/180,!this.clockwise),this},elipse:function(t){return t.ellipse(this.x||0,this.y||0,this.rx,this.ry,(this.rotation||0)*Math.PI/180,(this.startAngle||0)*Math.PI/180,(this.endAngle||360)*Math.PI/180,!this.clockwise),this},path:function(t){var e,i,s;return i=this.x||0,s=this.y||0,"string"==typeof this.path&&(this.path=new Path2D(this.path)),this.noClose=!0,t.translate(i,s),"f"!==(e=this.draw||"f&s")&&"f&s"!==e||t.fill(this.path),"s"!==e&&"f&s"!==e||t.stroke(this.path),this},node:function(t,e,i,s){var r,a,n,h,o,l,d,u,c;if(this.noClose=this.draw=!0,u=e.data,c=e.model,(n=s||(null!=(l=u.models)?l[this.model]:void 0))?(e.data=n,e.model=o=n.dirs[this.direction||0]):o="number"==typeof this.direction?e.data.dirs[this.direction]:e.model,o){if("string"==typeof(h=this.node))h=o[h];else{for(d=o,r=0,a=h.length;r<a;r++)d=d[h[r]];h=d}h&&(t.translate(this.x||0,this.y||0),f.call(h,t,e,i))}return e.model=c,e.data=u,this},attach:function(t,e,i){var s;return(s=e.attachment[this.attach])&&v.node.call(this,t,e,i,s),this},image:function(t,e){var i;return this.noClose=this.draw=!0,i=e.data.images[this.image],this.width||this.height?t.drawImage(i,this.x||0,this.y||0,this.width,this.height):t.drawImage(i,this.x||0,this.y||0),this},sprite:function(t,e){var i;return this.noClose=this.draw=!0,(i=this.sprite).constructor===String&&(this.sprite=i=e.data.sprites[i]),i.draw(t,this.frame,this.x||0,this.y||0,this.index),this},text:function(t){var e;return!0!==this.draw&&(this.drawText=this.draw),e=this.drawText,this.noClose=this.draw=!0,this.font&&(t.font=this.font),this.textAlign&&(t.textAlign=this.textAlign),null!==this.textBaseline&&(t.textBaseline=this.textBaseline),this.direction&&(t.direction=this.direction),"f"!==e&&"f&s"!==e||t.fillText(this.text,this.x||0,this.y||0,this.maxWidth),"s"!==e&&"f&s"!==e||t.strokeText(this.text,this.x||0,this.y||0,this.maxWidth),this}},w={linear:function(t){var e,i,s,r,a;for(i=t.createLinearGradient(this.x0||0,this.y0||0,this.x1||0,this.y1||0),s=0,r=(a=this.colorStops).length;s<r;s++)e=a[s],i.addColorStop(e.pos||0,e.color);return i},radial:function(t){var e,i,s,r,a;for(i=t.createRadialGradient(this.x0||0,this.y0||0,this.r0||0,this.x1||0,this.y1||0,this.r1||0),s=0,r=(a=this.colorStops).length;s<r;s++)e=a[s],i.addColorStop(e.pos||0,e.color);return i},pattern:function(t,e){var i;return i=e.data.images[this.image],t.createPattern(i,this.repetition||"repeat")}},y=function(t,e,i){var s;return null!=(s=w[i.type])?s.call(i,t,e):void 0},g=function(t,e){var i,s;return(s=this.stroke)&&(s.constructor===Object&&(this.stroke=y(t,e,s)),t.strokeStyle=this.stroke),(i=this.fill)&&(i.constructor===Object&&(this.fill=y(t,e,i)),t.fillStyle=this.fill),null!==this.lineWidth&&(t.lineWidth=this.lineWidth),null!==this.lineCap&&(t.lineCap=this.lineCap),this.lineJoin&&(t.lineJoin=this.lineJoin),null!==this.lineDashOffset&&(t.lineDashOffset=this.lineDashOffset),this},f=function(t,e,i){var s,r,a,n,h,o,l;if(t.save(),e.animation.animate(this),t.transform(this.scaleX||1,this.skewY||0,this.skewX||0,this.scaleY||1,this.origX||0,this.origY||0),(a=this.modelAngleScale)&&t.rotate(e.angle*a*Math.PI/180),this.angle&&t.rotate(this.angle*Math.PI/180),g.call(this,t,e),this.noShadow&&(t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0),null!==this.shadowBlur&&(t.shadowBlur=this.shadowBlur),null!==this.shadowColor&&(t.shadowColor=this.shadowColor),null!==this.shadowOffsetX&&(t.shadowOffsetX=this.shadowOffsetX),null!==this.shadowOffsetY&&(t.shadowOffsetY=this.shadowOffsetY),t.globalAlpha=i*(null===this.opacity?1:this.opacity),this.before){for(r in e.animation.reciveProps(this),h=this.before)(n=h[r]).hide||f.call(n,t,e,i);e.animation.animate(this)}if(t.beginPath(),null!=(o=v[this.type])&&o.call(this,t,e,i),this.noClose||t.closePath(),"f"!==(s=this.draw||"f&s")&&"f&s"!==s||t.fill(),"s"!==s&&"f&s"!==s||t.stroke(),this.clip&&t.clip(),e.animation.reciveProps(this),this.after)for(r in l=this.after)(n=l[r]).hide||f.call(n,t,e,i);return t.restore(),this},p={poly:function(t,e,i,s){var r,a,n,h,o,l,d,f,m,p;for(h=e[this.verts[0]],l=i.x,f=i.y,p=u+i.z,m=((h.z||0)+p)*c,o=((h.x||0)+l)*m,d=((h.y||0)+f)*m,t.moveTo(o,d),r=a=1,n=this.verts.length-1;1<=n?a<=n:a>=n;r=1<=n?++a:--a)m=(((h=e[this.verts[r]]).z||0)+p)*c,o=((h.x||0)+l)*m,d=((h.y||0)+f)*m,t.lineTo(o,d);return this},part:function(t,e,i,s,r){var a,n,h,o,l,d,u,c,f,p,v,y;if(this.noClose=this.draw=!0,(l=null!=(c=(p=s.data).models)?c[this.model]:void 0)?(s.data=l,u=l.dirsParts[this.direction||0]):u=s.parts,u&&(y=e[this.vert],a={x:i.x+(y.x||0),y:i.y+(y.y||0),z:i.z+(y.z||0)},d=u[this.part])){for(v=s.parts,s.parts=u,h=0,o=(f=d.faces).length;h<o;h++)n=f[h],m.call(n,t,s,a,r);s.parts=v}return s.data=p,this},node:function(t,e,i,s,r){return P(e[this.vert],i).apply(t),v.node.call(this,t,s,r),this},attach:function(t,e,i){var s;return P(verts[this.vert],camera).apply(t),(s=e.attachment[this.attach])&&v.node.call(this,t,e,i,s),this},elipse:function(t,e,i){var s,r,a,n,h;return n=(a=P(e[this.vert1],i)).x,h=a.y,s=((a=P(e[this.vert2],i)).x-n)/2,r=(a.y-h)/2,t.ellipse(n+s,h+r,s,r,(this.rotation||0)*Math.PI/180,(this.startAngle||0)*Math.PI/180,(this.endAngle||360)*Math.PI/180,!this.clockwise),this}},m=function(t,e,i,s){var r,a;return t.save(),this.stroke,g.call(this,t,e),t.globalAlpha=s*(null===this.opacity?1:this.opacity),t.beginPath(),null!=(a=p[this.type||"poly"])&&a.call(this,t,e.data.verts,i,e,s),this.noClose||t.closePath(),"f"!==(r=this.draw||"f&s")&&"f&s"!==r||t.fill(),"s"!==r&&"f&s"!==r||t.stroke(),t.restore(),this},u=1/(c=2e-4),z={x:0,y:0,scale:1,z:0,apply:function(t){return t.transform(this.scale,0,0,this.scale,this.x,this.y)}},l=function(){class t{static untransform(t,e,i){var s,r;return s=e/c/i.y-u-i.z,r=(u+s+i.z)*c,z.x=t/r-i.x,z.y=0,z.z=s,z}static transform(t,e,i,s){return i=(u+i+s.z)*c,z.x=(t+s.x)*i,z.y=(e+s.y)*i,z.scale=i,z}constructor(t){this.data=t,this.attachment=[],this.animation=new i}setData(t){return this.data=t,this.setAngle(this.angle)}setAngle(t){var e,i,s,r;return this.angle=t%=360,this.animation.setAngle(t),(i=this.data.dirs)?(s=i.length)>1?(e=360/s,t<0&&(t+=360),this.model=i[Math.floor(t/e)]):this.model=i[0]:this.model=null,(r=this.data.dirsParts)?(s=r.length)>1?(e=360/s,t<0&&(t+=360),this.parts=r[Math.floor(t/e)]):this.parts=r[0]:this.parts=null}draw2D(t,e=1){var i,s,r,a;if(this.model){for(i in a=[],r=this.model)(s=r[i]).hide?a.push(void 0):a.push(f.call(s,t,this,e));return a}}drawNode(t,e,i=1){if(this.model&&(e=this.model[e]))return f.call(e,t,this,i)}drawPart(t,e,i,s=1){var r,a,n,h,o;for(o=[],a=0,n=(h=e.faces).length;a<n;a++)r=h[a],o.push(m.call(r,t,this,i,s));return o}drawParts(t,e,i=1){var s,r,a,n,h;if(this.parts){for(s in h=[],n=this.parts)(a=n[s]).hide?h.push(void 0):h.push(function(){var s,n,h,o;for(o=[],s=0,n=(h=a.faces).length;s<n;s++)r=h[s],o.push(m.call(r,t,this,e,i));return o}.call(this));return h}}}return t.prototype.angle=0,t}.call(void 0),x=l.transform,P=function(t,e){return x(t.x||0,t.y||0,t.z||0,e)},b=function(t){var e,i,s,r,a;for(s in e=function(){class t extends Array{constructor(){super(0)}}return t.prototype.each=Array.prototype.forEach,t}.call(this),i=function(t,e=[]){var s,r,a,n,h,o;for(r=0,a=(o=Object.getOwnPropertyNames(t)).length;r<a;r++)"constructor"!==(n=o[r])&&"function"==typeof(s=t[n])&&(e[n]=s);return(h=Object.getPrototypeOf(t)).constructor!==Object&&i(h,e),e},r=e.prototype,t.prototype.each=function(t){return t(this)},a=i(t.prototype))(function(t){return r[s]=function(){var e;return e=arguments,this.forEach((function(i){return t.apply(i,e)}))}})(a[s]);return e},A=function(){var e,i;class s extends t{reset(){return i=e=0}getPercent(){return 1-(0!==e?i/e:0)}updatePercent(){return this.trigger("changepercent",[this.getPercent()])}load(t){var s;return s=this,i++,e++,function(){return null!=t&&t.apply(s,arguments),--i<=0&&(s.reset(),s.trigger("load")),s.updatePercent()}}isLoad(){return i<=0}loadJson(t,e){return e=this.load(e),$.getJSON(t+".json").done(e).fail((function(){return e(null)}))}loadJsonWithMode(t,e,i){return this.loadJson(t,(function(r){return this.loadJson(t+"_"+e,(function(t){return r?(t&&s.combineConfigs(r,t),i(r)):i(t)}))}))}loadImage(t,e){var i;return e=this.load(e),(i=new Image).onload=function(){return e(i)},i.src=t,i}static combineConfigs(t,e){var i,r,a;for(i in e)switch(typeof(a=e[i])){case"object":a?a.constructor!==Array?((r=t[i])||(r=t[i]={}),s.combineConfigs(r,a)):t[i]=a:delete t[i];break;case"undefined":delete t[a];break;default:t[i]=a}return t}}return i=0,e=0,s}.call(void 0),T=function(t,e,i){var r,a,n,h,o,l;if(t.loader)return t.loader.on("load",e),null;if(t.isLoad)e();else{if(i||(i=new A),t.loader=i,t.shadow&&(t.shadow.model=d.load(i,t.shadow.model)),o=t.models)for(l in o)h=o[l],o[l]=d.load(i,h);if(a=t.animation)for(l in a)r=a[l],a[l]=s.load(i,r);n=function(){return delete t.loader,t.isLoad=!0,e()},i.isLoad()?n():i.on("load",n)}return null},k=0,(U=[])[O=1]=function(){var t,e,i,s;return(i=(e=this.vPos).x-this.x)*i+(s=e.y-this.y)*s>=(t=this.data.moveRadius)*t?this.model.animation.scale=this.data.speedScale*this.getProp("speed"):this.stop()},C=function(){class e extends t{constructor(t){super(),this.data=t,this.model=new l,this.model.setData(this.data.models.default),this.data.animation&&(this.model.animation.data=this.data.animation.default,this.stand()),this.data.shadow&&(this.shadow=new l,this.shadow.setData(this.data.shadow.model)),this.vPos={x:0,y:0},this.vMove={x:0,y:0},this.initProperties()}initProperties(){var t,e,i,s,r;for(t in e=this.props={},r=[],s=this.data.properties)i=s[t],r.push(e[t]={v:i,a:0,m:1});return r}getProp(t){var e;return(e=this.props[t])?e.v*e.m+e.a:0}add2draw(){var t;return t=this.arena.gamecore.drawstage,this.shadow&&(t.add(this.shadow),this.shadow.nodeObj.node=this.data.shadow.node),t.add(this.model),this.model.nodeObj.node=this.data.styles.default,this}removeFromDraw(){var t;return this.shadow&&t.delete(this.shadow),(t=this.arena.gamecore.drawstage).delete(this.model),this}setAnim(t,e=1,i=!0){var s,r;return s=(r=this.model).animation,this.anim!==t&&(s.setAnim(this.data.animations[t],r.angle),this.anim=t),s.scale=e,s.loop=i,this}moveToPos(t,e){var i;return this.state=O,this.animation,(i=this.vPos).x=t,i.y=e,this.setVecMove(t-this.x,e-this.y),this.model,this.setAnim("walk"),this}stand(){return this.state=k,this.setAnim("stand")}stop(){var t;return this.stand(),(t=this.vMove).x=t.y=0}setVecMove(t,e){var i,s;return(s=this.vMove).x=t,s.y=e,0!==t&&0!==e&&(this.setAngleV(t,e),i=Math.sqrt(t*t+e*e),s.x/=i,s.y/=i),this}setAngleV(t,e){var i;return i=180*Math.atan2(e,t)/Math.PI,this.model.setAngle(i),this.shadow.setAngle(i),this}update(t,e){var i,s,r,a,n,h,o;return h=(n=this.vMove).x,o=n.y,0!==h&&0!==o&&(r=e*this.getProp("speed"),this.x+=h*r,this.y+=o*r),null!=(s=U[this.state])&&s.call(this),(n=this.arena.checkColission(this.x,this.y))&&(this.x=n.x,this.y=n.y,this.stop()),i=this.arena.ground,(n=this.model.nodeObj.v).x=this.x+i.x,n.z=this.y+i.z,n.y=this.z+i.y,this.model.animation.play(t)||this.trigger("anim_end"),this.shadow&&((a=this.shadow.nodeObj.v).x=n.x,a.z=n.z,a.y=i.y,this.shadow.animation.play(t)),this}}return e.prototype.state=k,e.prototype.x=0,e.prototype.y=0,e.prototype.z=0,e}.call(void 0),M=b(C),b(j=class extends t{constructor(t,e){super(),this.gamecore=t,this.team=e,this.selectUnits=new M,this.playerUnits=new M}update(){var t,e;return(t=this.action)&&(e=C.prototype[t.name],this.selectUnits.each(i=>{if(i.owner===this)return e.apply(i,t.args)}),this.action=null),this}updateCamera(){var t,e,i,s;if(s=this.mainUnit)return t=this.gamecore.arena.cameraOffset,i=this.gamecore.arena.ground,(e=this.gamecore.camera).x=i.x+t.x-s.x,e.y=i.y+t.y-s.z,e.z=i.z+t.z-s.y}addUnit(t){return t.owner=this,this.playerUnits.push(t),this}removeUnit(t){var e;return t.owner===this&&(t.owner=null,(e=this.playerUnits.indexOf(t))>=0&&this.playerUnits.splice(e,1)),this}setMainUnit(t){return this.mainUnit=t,this.addUnit(t),this.selectUnits=t}selectMain(){return this.mainUnit?this.selectUnits=this.mainUnit:this.selectUnits=new M}setupControl(t){return t.on("mousedown",t=>{var e,i,s;return i=(e=this.gamecore.arena).pickCursor(t.clientX,t.clientY),(i=e.getGroundPoint(i)).y=i.z,(s=e.checkColission(i.x,i.y))&&(i=s),this.action={name:"moveToPos",args:[i.x,i.y]}}),this}}),I={x:0,y:0,z:0},D=class{constructor(t){this.gamecore=t,this.units=new M}load(t,e){return t.loadJson(e||"arenas/arena",e=>{var i,r;if(e){for(i in e)r=e[i],this[i]=r;if(this.model&&(this.modelData=d.load(t,this.model)),this.animation)return this.animData=s.load(t,this.animation.file)}})}init(){return this.arena=new l,this.arena.setData(this.modelData),this.animData&&(this.arena.animation.data=this.animData,this.arena.animation.setAnim(this.animation.default)),this}predraw(){var t,e,i,s,r;return r=(t=this.gamecore.canvas).width,s=t.height,e=r/2+this.translate.x,i=s/2+this.translate.y,this.gamecore.context.translate(e,i),this}pickCursor(t,e){var i,s,r,a,n;return n=(s=this.gamecore.canvas).width,r=s.height,t-=n/2+this.translate.x,e-=r/2+this.translate.y,i=this.gamecore.camera,a=l.untransform(t,e,i),I.x=a.x,I.y=a.y,I.z=a.z,I}getGroundPoint(t){var e;return e=this.ground,t.x-=e.x,t.x-=e.y,t.z-=e.z,t}createUnit(t,e){var i;return(i=this.gamecore.unitsData[t])&&T(i,()=>{var t;return t=new C(i),this.add(t),"function"==typeof e?e(t):void 0}),this}add(t){return t.arena=this,this.units.push(t),this.gamecore.arena===this&&t.add2draw(),this}remove(t){var e;if((e=this.units.indexOf(t))>=0)return this.units.splice(e,1)}set(){var t,e;if(this.remove(),this.gamecore.arena=this,this.gamecore.drawstage.add(this.arena,this.position),this.units.add2draw(),t=this.camera)return(e=this.gamecore.camera).x=t.x||0,e.y=t.y||0,e.z=t.z||0}remove(){return this.gamecore.arena=null,this.gamecore.drawstage.delete(this.arena),this.units.removeFromDraw()}update(t,e){var i;return null!=(i=this.arena)&&i.animation.play(t),this.units.update(t,e)}checkColission(t,e){var i,s,r,a,n;for(s=!1,r=0,a=(n=this.collisions).length;r<a;r++)t<(i=n[r]).x1&&(t=i.x1,s=!0),t>i.x2&&(t=i.x2,s=!0),e<i.y1&&(e=i.y1,s=!0),e>i.y2&&(e=i.y2,s=!0);return s?(I.x=t,I.y=e,I):null}},F=-3e3,J=2e3,S=function(){class t{constructor(t,e){this.context=t,this.camera=e}add(t,e){var i,s,r,a,n,h;if(r=this.objects,e=e||{x:0,y:0,z:0},t.parts)for(i in h=t.parts)(n=h[i]).hide||((a=new q(t,n)).v=e,r.push(a));return t.data.dirs&&(t.nodeObj||((s=new W(t)).v=e,t.nodeObj=s,r.push(s))),this}delete(t){return delete t.nodeObj,this.objects=this.objects.filter((function(e){return e.model!==t})),this}draw(){var t,e,i,s;for(t=this.camera.z,this.drawList=e=this.objects.filter((function(e){var i;return(i=e.getZ()+t)>=F&&i<=J})).sort((function(t,e){return t.getZ()-e.getZ()})),i=0,s=e.length;i<s;i++)e[i].draw(this);return this}}return t.prototype.objects=[],t}.call(void 0),R={x:0,y:0,z:0},q=class{constructor(t,e){this.model=t,this.part=e}setPos(t){return this.v.x=t.x,this.v.y=t.y,this.v.z=t.z}getZ(){return this.part.z+this.v.z}draw(t){var e,i;return e=t.camera,i=t.context,R.x=this.v.x+e.x,R.y=this.v.y+e.y,R.z=this.v.z+e.z,i.save(),this.scale&&i.scale(this.scale,this.scale),this.model.drawPart(i,this.part,R,this.opacity),i.restore()}},W=class{constructor(t){this.model=t}setPos(t){return this.v.x=t.x,this.v.y=t.y,this.v.z=t.z}getZ(){return this.v.z}draw(t){var e,i,s;return e=t.camera,i=t.context,s=this.v,i.save(),l.transform(s.x,s.y,s.z,e).apply(i),this.scale&&i.scale(this.scale,this.scale),this.model.drawNode(i,this.node,this.opacity),i.restore()}},X=class extends t{constructor(t,e,s="easy"){var r;super(),this.canvas=t,this.context=e,this.mode=s,this.loader=new A,this.camera=r={x:0,y:0,z:0},this.gamescreen=$(".gamescreen"),this.drawstage=new S(this.context,r),this.mainArena=new D(this),this.mainPlayer=new j(this,1),this.time=i.getTime(),this.pauseTime=0,this.pause=!1,this.delta=0}load(){return this.loadUnitsData(),this.mainArena.load(this.loader),this.loader.on("load",()=>(this.mainArena.init(),this.mainArena.set(),this.mainPlayer.setupControl(this.gamescreen),this.mainArena.createUnit("banny",t=>this.mainPlayer.setMainUnit(t)),this.trigger("load"))),this}render(){var t;return(t=e=>{var s,r,a;return this.context.save(),a=this.canvas.width,s=this.canvas.height,this.context.fillStyle="#fff",this.context.fillRect(0,0,a,s),this.pause||(r=i.getTime()-this.pauseTime,this.delta=r-this.time,this.time=r),this.mainPlayer.update(),this.arena.update(this.time,this.delta),this.mainPlayer.updateCamera(),this.arena.predraw(),this.drawstage.draw(),this.context.restore(),window.requestAnimationFrame(t)})(0),this}pause(){return this.pause=!0,this.delta=0}unpause(){if(this.pause)return this.pause=!1,this.pauseTime+=i.getTime()-this.time}loadUnitsData(){return this.loader.loadJsonWithMode("npc/units",this.mode,t=>{var e,i,s,r;for(i in t)(r=t[i]).extends&&(e=t[r.extends],s=A.combineConfigs({},e),s=A.combineConfigs(s,r),t[i]=s);return this.unitsData=t}),null}},$(document).ready((function(){var t,e,i,s,r,a;return t=$("#canvas"),$(".gamescreen"),i=(e=t.get(0)).getContext("2d",{alpha:!1}),(a=function(){return e.width=$(window).width(),e.height=$(window).height()})(),$(window).on("resize",a),(s=new X(e,i)).on("load",(function(){return s.render()})),s.load(),$(".js-stop-propagation").on("mousedown mouseup mousemove touchstart touchmove",(function(t){return t.stopPropagation()})),r=function(t){return t.requestFullScreen?t.requestFullScreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullScreen?t.webkitRequestFullScreen():void 0},$(".btn-fullscreen").click((function(){return r(document.documentElement)}))}))}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
