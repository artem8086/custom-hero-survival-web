"use strict";!function(){var t,e,i,s,r,a,n,h,o,l,u,d,c,f,p,m,v,g,y,w,x,P,z,b,A,k,O,M,T,C,U,j,D,I,S,F,J,W,Z,q,R,X,Y,B,N,E,G;t=class{constructor(){this.handlers=[]}on(t,e){var i;return e&&((i=this.handlers[t])||(this.handlers[t]=i=[]),i.indexOf(e)<0&&i.push(e)),this}off(t,e){var i,s;return e?(i=this.handlers[t])&&(s=i.indexOf(e))>=0&&i.splice(s,1):delete this.handlers[t],this}trigger(t,e){var i,s,r;if(i=this.handlers[t])for(s=0,r=i.length;s<r;s++)i[s].apply(this,e);return this}},e=class{constructor(t,e){this.gamecore=t,this.player=e}init(){var t;return(t=this.gamecore.gamescreen).on("mousedown",t=>{var e;return e=this.gamecore.arena.pickFromScreen(t.clientX,t.clientY),this.player.action={name:"moveToPos",args:[e.x,e.y]}}),t.on("drop",t=>{var e;return e=this.gamecore.arena,t.preventDefault(),e.createUnit("banny",i=>{var s;return s=e.pickFromScreen(t.clientX,t.clientY),i.x=s.x,i.y=s.y,this.player.addUnit(i)})}),t.on("dragover dragenter",(function(){return!1})),this}},i=function(){class t{static load(e,i){var s;return(s=t.cache[i])||((s=new t).load(e,i),t.cache[i]=s),s}load(t,e){return t.loadJson(e,t=>{this.data=t}),t.loadImage(e+".png",t=>{this.texture=t})}draw(t,e,i,s,r=0){var a;if(a=this.data)switch(e.constructor){case Object:t.drawImage(this.texture,e.x,e.y,e.w,e.h,i+e.cx,s+e.cy,e.w,e.h);break;case Array:this.draw(t,e[Math.floor(r)%e.lenght],i,s);break;case String:this.draw(t,a[e],i,s,r)}return this}}return t.cache=[],t}.call(void 0),r=function(){class t{static load(e,i){var s;return(s=t.cache[i])||((s=new t).load(e,i),t.cache[i]=s),s}load(t,e){return t.loadJson(e,t=>{var e,i,s;if(t){for(e in i=[],t)s=t[e],i.push(this[e]=s);return i}})}}return t.cache=[],t}.call(void 0),a=function(){return(new Date).getTime()/1e3},h=function(t){return function(e){return 1-t(1-e)}},n=function(t){return function(e){return e<.5?t(2*e)/2:(2-t(2*(1-e)))/2}},o=function(t,e){return l[t]=e,l[t+"EaseOut"]=h(e),l[t+"EaseInOut"]=n(e)},l={linear:function(t){return t},easeOut:function(t){return 1-t},easeInOut:function(t){return t<.5?2*t:2-2*t}},o("quad",(function(t){return t*t})),o("circle",(function(t){return 1-Math.sin(Math.acos(t))})),o("bounce",(function(t){var e,i;for(e=0,i=1;;){if(t>=(7-4*e)/11)return-Math.pow((11-6*e-11*t)/4,2)+Math.pow(i,2);e+=i,i/=2}})),s=function(){class t{reset(){return this.startTime=a(),this.deltaTime=0,this}setAnim(t,e=0,i=this.data){return this.anim=null!=i?i[t]:void 0,this.reset(),this.anim&&(this.duration=this.anim?this.anim.duration:0,this.setAngle(e)),this}setAngle(t){var e,i,s;return this.frame=null,this.anim&&(t%=360,(i=this.anim.dirs)&&((s=i.lenght)>1?(e=360/s,t<0&&(t+=360),this.frame=i[Math.floor(t/e)]):this.frame=i[0])),this}play(t){var e,i;if(t=t||a(),this.deltaTime=e=(t-this.startTime)*this.scale,!(i=this.duration))return!1;if(e>i){if(!this.loop)return!1;this.deltaTime%=i}return!0}animate(e,i=e.nodePath,s=e.nodeName){var r,a,n,h,o,u,d,c,f,p,m,v,g,y,w;if((a=this.frame)&&(y=a[i]||a[s]))for(r=this.deltaTime,c=t.props,f=t.propsUsed,n=0,h=y.length;n<h;n++)if(r>=(u=y[n]).end)for(o in p=u.to)w=p[o],f[o]||(c[o]=e[o],f[o]=!0),e[o]=w;else if(r>=u.start)for(o in v=u.func?l[u.func]:l.linear,m=u.to)w=m[o],d=e[o],f[o]||(c[o]=d,f[o]=!0),d||(d=0),w.constructor===Number?(g=v((r-u.start)/(u.end-u.start)),e[o]=(w-d)*g+d):e[o]=w;return this}reciveProps(e){var i,s,r;for(i in s=t.props,r=t.propsUsed)r[i]&&(e[i]=s[i],delete r[i]);return this}createWorkFrame(){return this.loop=!1,this.frame={work:[{start:0,end:0,to:{}}]},this}resetWork(){var e,i;for(e in i=t.propsUsed)i[e]&&(i[e]=!1);return this}clearWork(){var t,e,i;return(t=this.frame.work[0]).start=t.end=0,i=function(){var t;for(e in t=[],i)i[e],t.push(delete i[e]);return t}(),this}animateProps(t,e,i){var s,r,a,n;for(r in this.duration=e,(s=this.frame.work[0]).end=e,s.func=i,n=s.to,t)a=t[r],n[r]=a;return this.reset(),this}}return t.getTime=a,t.prototype.loop=!0,t.prototype.startTime=0,t.prototype.duration=0,t.prototype.deltaTime=0,t.prototype.scale=1,t.props=[],t.propsUsed=[],t}.call(void 0),d=function(){class t{static load(e,i){var s;return(s=t.cache[i])||((s=new t).load(e,i),t.cache[i]=s),s}load(e,s){return e.loadJson(s,s=>{var r,a,n,h,o,l,u,d,c,f,p,m,v,g;if(s){for(h in s)g=s[h],this[h]=g;if(this.images)for(h in a=this.images,this.images=[],a)r=a[h],this.images[h]=e.loadImage(r);if(this.sprites)for(h in v=this.sprites,this.sprites=[],v)m=v[h],this.sprites[h]=i.load(e,m);if(this.models)for(h in u=this.models,this.models=[],u)l=u[h],this.models[h]=t.load(e,l);if(c=function(t,e=""){var i,s,r;for(i in r=[],t)(s=t[i]).nodePath=e+i,s.nodeName="@"+i,s.before&&c(s.before,s.nodePath+"<"),s.after?r.push(c(s.after,s.nodePath+">")):r.push(void 0);return r},this.dirs){for(p=[],n=0,o=(f=this.dirs).length;n<o;n++)d=f[n],p.push(c(d));return p}}})}}return t.cache=[],t}.call(void 0),g={line:function(t){return t.moveTo(this.x1||0,this.y1||0),t.lineTo(this.x2||0,this.y2||0),this},rect:function(t){return t.rect(this.x||0,this.y||0,this.width||1,this.height||1),this},rectRound:function(t){var e,i,s,r,a;return this.noClose=!1,r=this.x||0,a=this.y||0,s=this.width,e=this.height,s<2*(i=this.radius)&&(i=s/2),e<2*i&&(i=e/2),t.moveTo(r+i,a),t.arcTo(r+s,a,r+s,a+e,i),t.arcTo(r+s,a+e,r,a+e,i),t.arcTo(r,a+e,r,a,i),t.arcTo(r,a,r+s,a,i),this},arc:function(t){return t.arc(this.x||0,this.y||0,this.radius,(this.startAngle||0)*Math.PI/180,(this.endAngle||360)*Math.PI/180,!this.clockwise),this},elipse:function(t){return t.ellipse(this.x||0,this.y||0,this.rx,this.ry,(this.rotation||0)*Math.PI/180,(this.startAngle||0)*Math.PI/180,(this.endAngle||360)*Math.PI/180,!this.clockwise),this},path:function(t){var e,i,s;return i=this.x||0,s=this.y||0,"string"==typeof this.path&&(this.path=new Path2D(this.path)),this.noClose=!0,t.translate(i,s),"f"!==(e=this.draw||"f&s")&&"f&s"!==e||t.fill(this.path),"s"!==e&&"f&s"!==e||t.stroke(this.path),this},node:function(t,e,i,s){var r,a,n,h,o,l,u,d,c;if(this.noClose=this.draw=!0,d=e.data,c=e.model,(n=s||(null!=(l=d.models)?l[this.model]:void 0))?(e.data=n,e.model=o=n.dirs[this.direction||0]):o="number"==typeof this.direction?e.data.dirs[this.direction]:e.model,o){if("string"==typeof(h=this.node))h=o[h];else{for(u=o,r=0,a=h.length;r<a;r++)u=u[h[r]];h=u}h&&(t.translate(this.x||0,this.y||0),p.call(h,t,e,i))}return e.model=c,e.data=d,this},attach:function(t,e,i){var s;return(s=e.attachment[this.attach])&&g.node.call(this,t,e,i,s),this},image:function(t,e){var i;return this.noClose=this.draw=!0,i=e.data.images[this.image],this.width||this.height?t.drawImage(i,this.x||0,this.y||0,this.width,this.height):t.drawImage(i,this.x||0,this.y||0),this},sprite:function(t,e){var i;return this.noClose=this.draw=!0,(i=this.sprite).constructor===String&&(this.sprite=i=e.data.sprites[i]),i.draw(t,this.frame,this.x||0,this.y||0,this.index),this},text:function(t){var e;return!0!==this.draw&&(this.drawText=this.draw),e=this.drawText,this.noClose=this.draw=!0,this.font&&(t.font=this.font),this.textAlign&&(t.textAlign=this.textAlign),null!==this.textBaseline&&(t.textBaseline=this.textBaseline),this.direction&&(t.direction=this.direction),"f"!==e&&"f&s"!==e||t.fillText(this.text,this.x||0,this.y||0,this.maxWidth),"s"!==e&&"f&s"!==e||t.strokeText(this.text,this.x||0,this.y||0,this.maxWidth),this}},x={linear:function(t){var e,i,s,r,a;for(i=t.createLinearGradient(this.x0||0,this.y0||0,this.x1||0,this.y1||0),s=0,r=(a=this.colorStops).length;s<r;s++)e=a[s],i.addColorStop(e.pos||0,e.color);return i},radial:function(t){var e,i,s,r,a;for(i=t.createRadialGradient(this.x0||0,this.y0||0,this.r0||0,this.x1||0,this.y1||0,this.r1||0),s=0,r=(a=this.colorStops).length;s<r;s++)e=a[s],i.addColorStop(e.pos||0,e.color);return i},pattern:function(t,e){var i;return i=e.data.images[this.image],t.createPattern(i,this.repetition||"repeat")}},y=function(t,e,i){var s;return null!=(s=x[i.type])?s.call(i,t,e):void 0},w=function(t,e){var i,s;return(s=this.stroke)&&(s.constructor===Object&&(this.stroke=y(t,e,s)),t.strokeStyle=this.stroke),(i=this.fill)&&(i.constructor===Object&&(this.fill=y(t,e,i)),t.fillStyle=this.fill),null!==this.lineWidth&&(t.lineWidth=this.lineWidth),null!==this.lineCap&&(t.lineCap=this.lineCap),this.lineJoin&&(t.lineJoin=this.lineJoin),null!==this.lineDashOffset&&(t.lineDashOffset=this.lineDashOffset),this},p=function(t,e,i){var s,r,a,n,h,o,l;if(t.save(),e.animation.animate(this),t.transform(this.scaleX||1,this.skewY||0,this.skewX||0,this.scaleY||1,this.origX||0,this.origY||0),(a=this.modelAngleScale)&&t.rotate(e.angle*a*Math.PI/180),this.angle&&t.rotate(this.angle*Math.PI/180),w.call(this,t,e),this.noShadow&&(t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0),null!==this.shadowBlur&&(t.shadowBlur=this.shadowBlur),null!==this.shadowColor&&(t.shadowColor=this.shadowColor),null!==this.shadowOffsetX&&(t.shadowOffsetX=this.shadowOffsetX),null!==this.shadowOffsetY&&(t.shadowOffsetY=this.shadowOffsetY),t.globalAlpha=i*(null===this.opacity?1:this.opacity),this.before){for(r in e.animation.reciveProps(this),h=this.before)(n=h[r]).hide||p.call(n,t,e,i);e.animation.animate(this)}if(t.beginPath(),null!=(o=g[this.type])&&o.call(this,t,e,i),this.noClose||t.closePath(),"f"!==(s=this.draw||"f&s")&&"f&s"!==s||t.fill(),"s"!==s&&"f&s"!==s||t.stroke(),this.clip&&t.clip(),e.animation.reciveProps(this),this.after)for(r in l=this.after)(n=l[r]).hide||p.call(n,t,e,i);return t.restore(),this},v={poly:function(t,e,i,s){var r,a,n,h,o,l,u,d,p,m;for(h=e[this.verts[0]],l=i.x,d=i.y,m=c+i.z,p=((h.z||0)+m)*f,o=((h.x||0)+l)*p,u=((h.y||0)+d)*p,t.moveTo(o,u),r=a=1,n=this.verts.length-1;1<=n?a<=n:a>=n;r=1<=n?++a:--a)p=(((h=e[this.verts[r]]).z||0)+m)*f,o=((h.x||0)+l)*p,u=((h.y||0)+d)*p,t.lineTo(o,u);return this},part:function(t,e,i,s,r){var a,n,h,o,l,u,d,c,f,p,v,g;if(this.noClose=this.draw=!0,(l=null!=(c=(p=s.data).models)?c[this.model]:void 0)?(s.data=l,d=l.dirsParts[this.direction||0]):d=s.parts,d&&(g=e[this.vert],a={x:i.x+(g.x||0),y:i.y+(g.y||0),z:i.z+(g.z||0)},u=d[this.part])){for(v=s.parts,s.parts=d,h=0,o=(f=u.faces).length;h<o;h++)n=f[h],m.call(n,t,s,a,r);s.parts=v}return s.data=p,this},node:function(t,e,i,s,r){return z(e[this.vert],i).apply(t),g.node.call(this,t,s,r),this},attach:function(t,e,i){var s;return z(verts[this.vert],camera).apply(t),(s=e.attachment[this.attach])&&g.node.call(this,t,e,i,s),this},elipse:function(t,e,i){var s,r,a,n,h;return n=(a=z(e[this.vert1],i)).x,h=a.y,s=((a=z(e[this.vert2],i)).x-n)/2,r=(a.y-h)/2,t.ellipse(n+s,h+r,s,r,(this.rotation||0)*Math.PI/180,(this.startAngle||0)*Math.PI/180,(this.endAngle||360)*Math.PI/180,!this.clockwise),this}},m=function(t,e,i,s){var r,a;return t.save(),this.stroke,w.call(this,t,e),t.globalAlpha=s*(null===this.opacity?1:this.opacity),t.beginPath(),null!=(a=v[this.type||"poly"])&&a.call(this,t,e.data.verts,i,e,s),this.noClose||t.closePath(),"f"!==(r=this.draw||"f&s")&&"f&s"!==r||t.fill(),"s"!==r&&"f&s"!==r||t.stroke(),t.restore(),this},c=1/(f=2e-4),b={x:0,y:0,scale:1,z:0,apply:function(t){return t.transform(this.scale,0,0,this.scale,this.x,this.y)}},u=function(){class t{static untransform(t,e,i){var s,r;return s=e/f/i.y-c-i.z,r=(c+s+i.z)*f,b.x=t/r-i.x,b.y=e/r-i.y,b.z=s,b}static transform(t,e,i,s){return i=(c+i+s.z)*f,b.x=(t+s.x)*i,b.y=(e+s.y)*i,b.scale=i,b}constructor(t){this.data=t,this.attachment=[],this.animation=new s}setData(t){return this.data=t,this.setAngle(this.angle)}setAngle(t){var e,i,s,r;return this.angle=t%=360,this.animation.setAngle(t),(i=this.data.dirs)?(s=i.length)>1?(e=360/s,t<0&&(t+=360),this.model=i[Math.floor(t/e)]):this.model=i[0]:this.model=null,(r=this.data.dirsParts)?(s=r.length)>1?(e=360/s,t<0&&(t+=360),this.parts=r[Math.floor(t/e)]):this.parts=r[0]:this.parts=null}draw2D(t,e=1){var i,s,r,a;if(this.model){for(i in a=[],r=this.model)(s=r[i]).hide?a.push(void 0):a.push(p.call(s,t,this,e));return a}}drawNode(t,e,i=1){if(this.model&&(e=this.model[e]))return p.call(e,t,this,i)}drawPart(t,e,i,s=1){var r,a,n,h,o;for(o=[],a=0,n=(h=e.faces).length;a<n;a++)r=h[a],o.push(m.call(r,t,this,i,s));return o}drawParts(t,e,i=1){var s,r,a,n,h;if(this.parts){for(s in h=[],n=this.parts)(a=n[s]).hide?h.push(void 0):h.push(function(){var s,n,h,o;for(o=[],s=0,n=(h=a.faces).length;s<n;s++)r=h[s],o.push(m.call(r,t,this,e,i));return o}.call(this));return h}}}return t.prototype.angle=0,t}.call(void 0),P=u.transform,z=function(t,e){return P(t.x||0,t.y||0,t.z||0,e)},A=function(t){var e,i,s,r,a;for(s in e=function(){class t extends Array{constructor(){super(0)}}return t.prototype.each=Array.prototype.forEach,t}.call(this),i=function(t,e=[]){var s,r,a,n,h,o;for(r=0,a=(o=Object.getOwnPropertyNames(t)).length;r<a;r++)"constructor"!==(n=o[r])&&"function"==typeof(s=t[n])&&(e[n]=s);return(h=Object.getPrototypeOf(t)).constructor!==Object&&i(h,e),e},r=e.prototype,t.prototype.each=function(t){return t(this)},a=i(t.prototype))(function(t){return r[s]=function(){var e;return e=arguments,this.forEach((function(i){return t.apply(i,e)}))}})(a[s]);return e},O=class{constructor(t,e){this.context=t,this.camera=e,this.objects=[]}add(t,e){var i,s,r,a,n,h;if(r=this.objects,e=e||{x:0,y:0,z:0},t.parts)for(i in h=t.parts)(n=h[i]).hide||((a=new T(t,n)).v=e,r.push(a));return t.data.dirs&&(t.nodeObj||((s=new M(t)).v=e,t.nodeObj=s,r.push(s))),this}addGroup(t){return this.objects.push(t),this}delete(t){return delete t.nodeObj,this.objects=this.objects.filter((function(e){return e.model!==t})),this}draw(){var t,e,i,s;for(t=this.camera.z,this.drawList=e=this.objects.filter((function(e){var i;return(i=e.getZ()+t)>=-4e3&&i<=2e3})).sort((function(t,e){return t.getZ()-e.getZ()})),i=0,s=e.length;i<s;i++)e[i].draw(this);return this}},C={x:0,y:0,z:0},T=class{constructor(t,e){this.model=t,this.part=e}setPos(t){return this.v.x=t.x,this.v.y=t.y,this.v.z=t.z,this}getZ(){return this.part.z+this.v.z}draw(t){var e,i;return e=t.camera,i=t.context,C.x=this.v.x+e.x,C.y=this.v.y+e.y,C.z=this.v.z+e.z,i.save(),this.scale&&i.scale(this.scale,this.scale),this.model.drawPart(i,this.part,C,this.opacity),i.restore()}},M=class{constructor(t){this.model=t}setPos(t){return this.v.x=t.x,this.v.y=t.y,this.v.z=t.z,this}getZ(){return this.v.z}draw(t){var e,i,s;return e=t.camera,i=t.context,s=this.v,i.save(),u.transform(s.x,s.y,s.z,e).apply(i),this.scale&&i.scale(this.scale,this.scale),this.model.drawNode(i,this.node,this.opacity),i.restore()}},k=class extends O{constructor(t,e){super(),this.model=t,this.v=e||{x:0,y:0,z:0}}setPos(t){return this.v.x=t.x,this.v.y=t.y,this.v.z=t.z,this}getZ(){return this.v.z}draw(t){var e,i,s,r,a,n,h,o,l;for(e=0,i=(r=this.objects).length;e<i;e++)s=r[e],l=this.v,a=(o=s.v).x,n=o.y,h=o.z,o.x+=l.x,o.y+=l.y,o.z+=l.z,s.draw(t),o.x=a,o.y=n,o.z=h;return this}play(t,e){var i,s,r,a,n,h;for(h=!0,i=0,s=(a=this.objects).length;i<s;i++)n=(r=a[i]).model.animation.play(t),e===r&&(h=n);return h}sort(){return this.objects=this.objects.sort((function(t,e){return t.getZ()-e.getZ()})),this}},U=function(){var e,i;class s extends t{reset(){return i=e=0}getPercent(){return 1-(0!==e?i/e:0)}updatePercent(){return this.trigger("changepercent",[this.getPercent()])}load(t){var s;return s=this,i++,e++,function(){return null!=t&&t.apply(s,arguments),--i<=0&&(s.reset(),s.trigger("load")),s.updatePercent()}}isLoad(){return i<=0}loadJson(t,e){return e=this.load(e),$.getJSON(t+".json").done(e).fail((function(){return e(null)}))}loadJsonWithMode(t,e,i){return this.loadJson(t,(function(r){return this.loadJson(t+"_"+e,(function(t){return r?(t&&s.combineConfigs(r,t),i(r)):i(t)}))}))}loadImage(t,e){var i;return e=this.load(e),(i=new Image).onload=function(){return e(i)},i.src=t,i}static combineConfigs(t,e){var i,r,a;for(i in e)switch(typeof(a=e[i])){case"object":a?a.constructor!==Array?((r=t[i])||(r=t[i]={}),s.combineConfigs(r,a)):t[i]=a:delete t[i];break;case"undefined":delete t[a];break;default:t[i]=a}return t}}return i=0,e=0,s}.call(void 0),I=function(t,e,i){var s,a,n,h,o,l;if(t.loader)return t.loader.on("load",e),null;if(t.isLoad)e();else{if(i||(i=new U),t.loader=i,t.shadow&&(t.shadow.model=d.load(i,t.shadow.model)),o=t.models)for(l in o)h=o[l],o[l]=d.load(i,h);if(a=t.animation)for(l in a)s=a[l],a[l]=r.load(i,s);n=function(){return delete t.loader,t.isLoad=!0,e()},i.isLoad()?n():i.on("load",n)}return null},(S=[])[1]=function(){var t,e,i,s;return(i=(e=this.vPos).x-this.x)*i+(s=e.y-this.y)*s>=(t=this.data.moveRadius)*t?this.model.animation.scale=this.data.speedScale*this.getProp("speed"):this.stop()},j=function(){class e extends t{constructor(t){super(),this.data=t,this.model=new u,this.model.setData(this.data.models.default),this.data.animation&&(this.model.animation.data=this.data.animation.default,this.stand()),this.data.shadow&&(this.shadow=new u,this.shadow.setData(this.data.shadow.model)),this.vPos={x:0,y:0},this.vMove={x:0,y:0},this.initProperties()}initProperties(){var t,e,i,s,r;for(t in e=this.props={},r=[],s=this.data.properties)i=s[t],r.push(e[t]={v:i,a:0,m:1});return r}getProp(t){var e;return(e=this.props[t])?e.v*e.m+e.a:0}add2draw(){var t;return this.drawgroup=t=new k(this.model),this.shadow&&(t.add(this.shadow),this.shadow.nodeObj.node=this.data.shadow.node),t.add(this.model),this.model.nodeObj.node=this.data.styles.default,this.arena.gamecore.drawstage.addGroup(t),this}removeFromDraw(){return this.arena.gamecore.drawstage.delete(this.model),this}setAnim(t,e=1,i=!0){var s,r;return s=(r=this.model).animation,this.anim!==t&&(s.setAnim(this.data.animations[t],r.angle),this.anim=t),s.scale=e,s.loop=i,this}moveToPos(t,e){var i,s,r,a;return(r=t-this.x)*r+(a=e-this.y)*a>=(i=this.data.moveRadius)*i&&(this.state=1,this.animation,(s=this.vPos).x=t,s.y=e,this.setAnim("walk"),this.setVecMove(r,a)),this}stand(){return this.state=0,this.setAnim("stand")}stop(){var t;return this.stand(),(t=this.vMove).x=t.y=0}setVecMove(t,e){var i,s;return(s=this.vMove).x=t,s.y=e,0===t&&0===e||(this.setAngleV(t,e),i=Math.sqrt(t*t+e*e),s.x/=i,s.y/=i),this}setAngleV(t,e){var i;return i=180*Math.atan2(e,t)/Math.PI,this.model.setAngle(i),this.shadow.setAngle(i),this}update(t,e){var i,s,r,a,n,h,o,l;return o=(h=this.vMove).x,l=h.y,0===o&&0===l||(n=e*this.getProp("speed"),this.x+=o*n,this.y+=l*n),null!=(a=S[this.state])&&a.call(this),(h=this.arena.checkColission(this.x,this.y))&&(this.x=h.x,this.y=h.y,this.stop()),s=this.arena.ground,(h=(i=this.drawgroup).v).x=this.x+s.x,h.z=this.y+s.z,h.y=s.y,(r=this.model).nodeObj.v.y=-this.z,i.play(t,r)||this.trigger("anim_end"),this}}return e.prototype.state=0,e.prototype.x=0,e.prototype.y=0,e.prototype.z=0,e}.call(void 0),D=A(j),A(F=class extends t{constructor(t,e){super(),this.gamecore=t,this.team=e,this.selectUnits=new D,this.playerUnits=new D}update(){var t,e;return(t=this.action)&&(e=j.prototype[t.name],this.selectUnits.each(i=>{if(i.owner===this)return e.apply(i,t.args)}),this.action=null),this}updateCamera(){var t,e,i,s,r;if(r=this.mainUnit)return t=(i=this.gamecore).arena.cameraOffset,s=i.arena.ground,(e=i.camera).x=s.x+t.x-r.x,e.y=s.y+t.y-r.z,e.z=s.z+t.z-r.y+i.cameraZoom}addUnit(t){return t.owner=this,this.playerUnits.push(t),this}removeUnit(t){var e;return t.owner===this&&(t.owner=null,(e=this.playerUnits.indexOf(t))>=0&&this.playerUnits.splice(e,1)),this}setMainUnit(t){return this.mainUnit=t,this.addUnit(t),this.selectUnits=t}selectMain(){return this.mainUnit?this.selectUnits=this.mainUnit:this.selectUnits=new D}}),J=class{pickFromScreen(t,e){var i;return i=this.pickCursor(t,e),(i=this.getGroundPoint(i)).y=i.z,this.checkColission(i.x,i.y)||i}},Z={x:0,y:0,z:0},W=class extends J{constructor(t){super(),this.gamecore=t,this.units=new D}load(t,e){return t.loadJson(e||"arenas/arena",e=>{var i,s;if(e){for(i in e)s=e[i],this[i]=s;if(this.model&&(this.modelData=d.load(t,this.model)),this.animation)return this.animData=r.load(t,this.animation.file)}})}init(){return this.arena=new u,this.arena.setData(this.modelData),this.animData&&(this.arena.animation.data=this.animData,this.arena.animation.setAnim(this.animation.default)),this}predraw(){var t,e,i,s,r;return r=(t=this.gamecore.canvas).width,s=t.height,e=r/2+this.translate.x,i=s/2+this.translate.y,this.gamecore.context.translate(e,i),this}pickCursor(t,e){var i,s,r,a,n;return n=(s=this.gamecore.canvas).width,r=s.height,t-=n/2+this.translate.x,e-=r/2+this.translate.y,i=this.gamecore.camera,a=u.untransform(t,e,i),Z.x=a.x,Z.y=a.y,Z.z=a.z,Z}getGroundPoint(t){var e;return e=this.ground,t.x-=e.x,t.x-=e.y,t.z-=e.z,t}createUnit(t,e){var i;return(i=this.gamecore.unitsData[t])&&I(i,()=>{var t;return t=new j(i),this.add(t),"function"==typeof e?e(t):void 0}),this}add(t){return t.arena=this,this.units.push(t),this.gamecore.arena===this&&t.add2draw(),this}remove(t){var e;if((e=this.units.indexOf(t))>=0)return this.units.splice(e,1)}set(){var t,e;if(this.remove(),this.gamecore.arena=this,this.gamecore.drawstage.add(this.arena,this.position),this.units.add2draw(),t=this.camera)return(e=this.gamecore.camera).x=t.x||0,e.y=t.y||0,e.z=t.z||0}remove(){return this.gamecore.arena=null,this.gamecore.drawstage.delete(this.arena),this.units.removeFromDraw()}update(t,e){var i;return null!=(i=this.arena)&&i.animation.play(t),this.units.update(t,e)}checkColission(t,e){var i,s,r,a,n;for(s=!1,r=0,a=(n=this.collisions).length;r<a;r++)t<(i=n[r]).x1&&(t=i.x1,s=!0),t>i.x2&&(t=i.x2,s=!0),e<i.y1&&(e=i.y1,s=!0),e>i.y2&&(e=i.y2,s=!0);return s?(Z.x=t,Z.y=e,Z):null}},q=function(){class t{constructor(t){this.gamecore=t}init(){return this.timer=setInterval(()=>this.logicUpdate(),50)}pause(){if(!this.pause)return this.pause=!0,clearInterval(this.timer)}unpause(){if(this.pause)return this.pause=!1,this.initEngine()}logicUpdate(){return this.gamecore.mainPlayer.update(),this}}return t.prototype.pause=!1,t}.call(void 0),G=(new Date).getMilliseconds(),N=1,E=0,X=function(){var t;return t=(new Date).getMilliseconds(),G>t?(E=N,N=1):N+=1,G=t,E},Y=$(".js-fps"),B=$(".js-count"),R=function(){class i extends t{constructor(t,i,r="easy"){var a;super(),this.canvas=t,this.context=i,this.mode=r,this.loader=new U,this.camera=a={x:0,y:0,z:0},this.gamescreen=$(".gamescreen"),this.drawstage=new O(this.context,a),this.mainArena=new W(this),this.engine=new q(this),this.mainPlayer=new F(this,1),this.gamecontrol=new e(this,this.mainPlayer),this.time=s.getTime()}load(){return this.loadUnitsData(),this.mainArena.load(this.loader),this.loader.on("load",()=>(this.mainArena.init(),this.mainArena.set(),this.gamecontrol.init(),this.engine.init(),this.mainArena.createUnit("banny",t=>this.mainPlayer.setMainUnit(t)),this.trigger("load"))),this}render(){var t;return(t=e=>{var i,r,a;return this.context.save(),a=this.canvas.width,i=this.canvas.height,this.context.fillStyle="#fff",this.context.fillRect(0,0,a,i),this.pause||(r=s.getTime()-this.pauseTime,this.delta=r-this.time,this.time=r),this.arena.update(this.time,this.delta),this.mainPlayer.updateCamera(),this.arena.predraw(),this.drawstage.draw(),this.context.restore(),B.text(this.arena.units.length),Y.text(X()),window.requestAnimationFrame(t)})(0),this}pause(){return this.engine.pause(),this.pause=!0,this.delta=0}unpause(){if(this.pause)return this.engine.unpause(),this.pause=!1,this.pauseTime+=s.getTime()-this.time}loadUnitsData(){return this.loader.loadJsonWithMode("npc/units",this.mode,t=>{var e,i,s,r;for(i in t)(r=t[i]).extends&&(e=t[r.extends],s=U.combineConfigs({},e),s=U.combineConfigs(s,r),t[i]=s);return this.unitsData=t}),null}}return i.prototype.cameraZoom=0,i.prototype.pauseTime=0,i.prototype.pause=!1,i.prototype.delta=0,i}.call(void 0),$(document).ready((function(){var t,e,i,s,r,a;return t=$("#canvas"),$(".gamescreen"),i=(e=t.get(0)).getContext("2d",{alpha:!1}),(a=function(){return e.width=$(window).width(),e.height=$(window).height()})(),$(window).on("resize",a),(s=new R(e,i)).on("load",(function(){return s.render()})),s.load(),$(".js-stop-propagation").on("mousedown mouseup mousemove touchstart touchmove",(function(t){return t.stopPropagation()})),r=function(t){return t.requestFullScreen?t.requestFullScreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullScreen?t.webkitRequestFullScreen():void 0},$(".btn-fullscreen").click((function(){return r(document.documentElement)}))}))}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
